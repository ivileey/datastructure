//《数据结构（C++版）（第3版）》 作者：叶核亚
//【例6.3】  字符串的Huffman编码及译码。
//构造哈夫曼树并获得哈夫曼编码

#include "HuffmanTree.h"

int main()
{
//    int weight[]={7,5,1,2};
    int weight[]={5,29,7,8,14,23,3,11};                    //图6.37，权值集合，默认字符集为"ABCDEFGH"
//    int weight[]={3,5,7,8,11,14,23,29};                    //图6.37，排序权值集合，默认字符集为"ABCDEFGH"
//    int weight[]={7,5,1,2,1};
//    int weight[] = {2,3,5,7,11,13,17,19,23,29,31,37,41};//张乃孝
//    int weight[] = {7,19,2,6,32,3,21,10};

    HuffmanTree huftree(weight, 8);
    huftree.printCode();
    MyString text("ABCDEFGH"), codestr;
    codestr = huftree.encode(text);
    cout<<"将"<<text<<"压缩为"<<codestr<<"\n将"<<codestr<<"解码为"<<huftree.decode(codestr)<<endl;
    codestr += codestr;
    cout<<"将"<<codestr<<"解码为"<<huftree.decode(codestr)<<endl;

    system("pause");
    return 0;
}


/*
    int weight[]={5,29,7,8,14,23,3,11};                    //权值集合，默认字符集为"ABCDEFGH"
程序运行结果如下：
Huffman树的结点顺序表：((5,8,-1,-1), (29,13,-1,-1), (7,9,-1,-1), (8,9,-1,-1), (14,11,-1,-1), (23,12,-1,-1), (3,8,-1,-1), (11,10,-1,-1), (8,10,6,0), (15,11,2,3), (19,12,8,7), (29,13,4,9), (42,14,10,5), (58,14,1,11), (100,-1,12,13))
Huffman编码：A "0001"，B "10"，C "1110"，D "1111"，E "110"，F "01"，G "0000"，H "001"，
将"ABCDEFGH"压缩为"00011011101111110010000001"
将"00011011101111110010000001"解码为"ABCDEFGH"
将"0001101110111111001000000100011011101111110010000001"解码为"ABCDEFGHABCDEFGH"


    int weight[]={7,5,1,2};
哈夫曼树的结点数组：
第0行  7, 6, -1, -1
第1行  5, 5, -1, -1
第2行  1, 4, -1, -1
第3行  2, 4, -1, -1
第4行  3, 5, 2, 3
第5行  8, 6, 4, 1
第6行  15, -1, 0, 5

哈夫曼编码：
0
11
100
101

    int weight[]={7,5,1,2,1};
哈夫曼树的结点数组：
第0行  7, 8, -1, -1
第1行  5, 7, -1, -1
第2行  1, 5, -1, -1
第3行  2, 6, -1, -1
第4行  1, 5, -1, -1
第5行  2, 6, 2, 4
第6行  4, 7, 3, 5
第7行  9, 8, 6, 1
第8行  16, -1, 0, 7

哈夫曼编码：
0
11
1010
100
1011


        int[] weight = {2,3,5,7,11,13,17,19,23,29,31,37,41};//张乃孝
哈夫曼树的结点数组：
第0行  2, 13, -1, -1
第1行  3, 13, -1, -1
第2行  5, 14, -1, -1
第3行  7, 15, -1, -1
第4行  11, 16, -1, -1
第5行  13, 16, -1, -1
第6行  17, 17, -1, -1
第7行  19, 18, -1, -1
第8行  23, 18, -1, -1
第9行  29, 19, -1, -1
第10行  31, 20, -1, -1
第11行  37, 21, -1, -1
第12行  41, 21, -1, -1
第13行  5, 14, 0, 1
第14行  10, 15, 2, 13
第15行  17, 17, 3, 14
第16行  24, 19, 4, 5
第17行  34, 20, 6, 15
第18行  42, 22, 7, 8
第19行  53, 22, 16, 9
第20行  65, 23, 10, 17
第21行  78, 23, 11, 12
第22行  95, 24, 18, 19
第23行  143, 24, 20, 21
第24行  238, -1, 22, 23

哈夫曼编码：
1011110
1011111
101110
10110
0100
0101
1010
000
001
011
100
110
111

    int weight[] = {7,19,2,6,32,3,21,10};
哈夫曼树的结点数组：
第0行  7, 10, -1, -1
第1行  19, 12, -1, -1
第2行  2, 8, -1, -1
第3行  6, 9, -1, -1
第4行  32, 13, -1, -1
第5行  3, 8, -1, -1
第6行  21, 12, -1, -1
第7行  10, 10, -1, -1
第8行  5, 9, 2, 5
第9行  11, 11, 8, 3
第10行  17, 11, 0, 7
第11行  28, 13, 9, 10
第12行  40, 14, 1, 6
第13行  60, 14, 11, 4
第14行  100, -1, 12, 13

哈夫曼编码：
1010
00
10000
1001
11
10001
01
1011


/*
    String[] code = htree.HuffmanCode();
    System.out.println("哈夫曼编码:");
    for (int i=0; i<code.length; i++)
         System.out.println(code[i]);
frequency(char *str)//统计在一个串中各字符的出现次数hiyxx频率。
{
}




*/